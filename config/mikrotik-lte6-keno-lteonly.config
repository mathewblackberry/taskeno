/interface bridge port
remove [ find interface=ether1 ]

/interface list member
:if ([:len [ find where interface="ether1" and list="WAN" ]] = 0) do={
    /interface list member add interface="ether1" list="WAN"
    :log info "ether1 added to WAN interface list."
} else={
    :log info "ether1 already exists in WAN interface list."
}

/user group
:if ([:len [find name=api]] = 0) do={
  add name=api policy=ftp,reboot,write,password,api,rest-api,policy,test,sniff,read,!local,!telnet,!ssh,!winbox,!web,!sensitive,!romon
} else={
  set [find name=api] policy=ftp,reboot,write,password,api,rest-api,policy,test,sniff,read,!local,!telnet,!ssh,!winbox,!web,!sensitive,!romon
}

:if ([:len [find name=backup]] = 0) do={
  add name=backup policy=ssh,read,sensitive,!local,!telnet,!ftp,!reboot,!write,!policy,!test,!winbox,!password,!web,!sniff,!api,!romon,!rest-api
} else={
  set [find name=backup] policy=ssh,read,sensitive,!local,!telnet,!ftp,!reboot,!write,!policy,!test,!winbox,!password,!web,!sniff,!api,!romon,!rest-api
}

/user
:if ([:len [find name=api]] = 0) do={
  add name=api group=api password="*DSv!DgR^Q3FfB4w"
} else={
  set [find name=api] group=api password="*DSv!DgR^Q3FfB4w"
}

/interface lte apn
:if ([:len [ find name=Keno ]] = 0) do={
  add apn=wip.networkgaming.com.au authentication=pap comment="Keno APN" ip-type=ipv4 name=Keno use-peer-dns=no user={{routerDetails.mobileDetails.username}}@wip.networkgaming.com.au password={{routerDetails.mobileDetails.password}} default-route-distance=200
  :log info "Keno APN Added"
} else= {
  set [ find name=Keno ] apn=wip.networkgaming.com.au authentication=pap comment="Keno APN" ip-type=ipv4 use-peer-dns=no user={{routerDetails.mobileDetails.username}}@wip.networkgaming.com.au password={{routerDetails.mobileDetails.password}} default-route-distance=200
  :log info "Keno APN Updated"
}
/interface lte
set [ find default-name=lte1 ] allow-roaming=no apn-profiles=Keno band="" modem-init="at+cgauth=1,1,\"{{routerDetails.mobileDetails.username}}@wip.networkgaming.com.au\",\"{{routerDetails.mobileDetails.password}}\"" network-mode=lte
:log info "Keno Interface Updated"
/ip pool
:if ([:len [ find name=default-dhcp ]] = 0) do={
  add comment="Technician DHCP" name=default-dhcp ranges={{ipplus(lanSubnets[0].subnet,6)}}
  :log info "Technician DHCP Pool Added"
} else= {
  set [ find name=default-dhcp ] comment="Technician DHCP" ranges={{ipplus(lanSubnets[0].subnet,6)}}
  :log info "Technician DHCP Pool Updated"
}

/routing table
add fib name=main
/routing bgp template
set default as={{numipplus(loopbacks[0],64800)}} disabled=no output.redistribute=connected router-id={{loopbacks[0]}} routing-table=main use-bfd=yes
/snmp community
:if ([find default=yes disabled=no] != "") do={
  set [find default=yes] disabled=yes
  :log info "Default SNMP community disabled."
}
:if ([:len [find name=bsitaskenosnmp-ro]] = 0) do={
  add addresses=172.27.251.0/25 name=bsitaskenosnmp-ro
  :log info "SNMP community 'bsitaskenosnmp-ro' added."
} else={
  :log info "SNMP community 'bsitaskenosnmp-ro' already exists."
}

/routing bfd configuration
:if ([:len [find interfaces=ether1]] = 0) do={
    add disabled=no interfaces=ether1
    :log info "BFD configuration for ether1 added."
} else={
    :log info "BFD configuration for ether1 already exists."
}

/routing bgp connection
:if ([:len [find name=bgp1]] = 0) do={
    add as={{numipplus(loopbacks[0],64800)}} disabled=no local.role=ebgp name=bgp1 output.redistribute=connected remote.address={{findnetworkipplus(wanSubnets[0],254)}}/32 .as=64799 router-id={{loopbacks[0]}} routing-table=main templates=default use-bfd=yes
    :log info "BGP connection bgp1 added."
} else={
    :log info "BGP connection bgp1 already exists."
}
:if ([:len [find name=bgp2]] = 0) do={
    add as={{numipplus(loopbacks[0],64800)}} disabled=no local.role=ebgp name=bgp2 output.redistribute=connected remote.address={{findnetworkipplus(wanSubnets[0],255)}}/32 .as=64799 router-id={{loopbacks[0]}} routing-table=main templates=default use-bfd=yes
    :log info "BGP connection bgp2 added."
} else={
    :log info "BGP connection bgp2 already exists."
}

/snmp
set contact=mathew@blacksaltit.com.au enabled=yes location="{{site.address}}, {{site.city}} {{site.state}} {{site.postcode}} [{{site.latitude}}, {{site.longitude}}]" src-address={{loopbacks[0]}} trap-community=bsitaskenosnmp-ro trap-generators=interfaces trap-interfaces=all trap-target=172.27.251.10

/system identity
set name={{hostname}}



/ip dhcp-server
:if ([:len [ find name=defconf ]] = 0) do={
  add address-pool=default-dhcp interface=bridge lease-time=1h name=defconf
  :log info "DHCP Settings Added"
} else= {
  set [ find name=defconf ] address-pool=default-dhcp interface=bridge lease-time=1h
  :log info "DHCP Settings Updated"
}
/ip dhcp-server network
:if ([:len [ find address={{lanSubnets[0].subnet}} ]] = 0) do={
  remove [find]
  add address={{lanSubnets[0].subnet}} comment=defconf gateway={{ipplus(lanSubnets[0].subnet,1)}}
  :log info "DHCP Existing Networks Removed"
  :log info "DHCP Network Added"
} else= {
  set [ find address={{lanSubnets[0].subnet}} ] comment=defconf gateway={{ipplus(lanSubnets[0].subnet,1)}}
  :log info "DHCP Network Updated"
}
/ip firewall nat
remove [find]

/ip firewall address-list
:if ([:len [ find list=management_hosts address=172.27.251.0/25 ]] = 0) do={add list=management_hosts address=172.27.251.0/25}
:if ([:len [ find list=management_hosts address=172.27.247/28 ]] = 0) do={add list=management_hosts address=172.27.247.0/28}
:if ([:len [ find list=management_hosts address=10.40.42.0/27 ]] = 0) do={add list=management_hosts address=10.40.42.0/27}
:if ([:len [ find list=management_hosts address=10.240.0.64/27 ]] = 0) do={add list=management_hosts address=10.240.0.64/27}
:if ([:len [ find list=management_hosts address=10.22.64.0/24 ]] = 0) do={add list=management_hosts address=10.22.64.0/24}

/ip firewall filter
remove [find where !dynamic]

:if ([:len [ find comment="Accept Established Input Connections" ]] = 0) do={
  add action=accept chain=input comment="Accept Established Input Connections" connection-state=established,related,untracked
  :log info  "Firewall Rule Added - Accept Established Input Connections"
} else= {
  set [ find comment="Allow ping to router from WAN" ] action=accept chain=input connection-state=established,related,untracked
  :log info  "Firewall Rule Updated - Accept Established Input Connections"
}
:if ([:len [find comment="Drop Invalid Input Connections"]] = 0) do={
  add action=drop chain=input comment="Drop Invalid Input Connections" connection-state=invalid
  :log info "Firewall Rule Added - Drop Invalid Input Connections"
} else={
  set [find comment="Drop Invalid Input Connections"] action=drop chain=input connection-state=invalid
  :log info "Firewall Rule Updated - Drop Invalid Input Connections"
}
:if ([:len [find comment="Allow ICMP Input"]] = 0) do={
  add action=accept chain=input comment="Allow ICMP Input" protocol=icmp
  :log info "Firewall Rule Added - Allow ICMP Input"
} else={
  set [find comment="Allow ICMP Input"] action=accept chain=input protocol=icmp
  :log info "Firewall Rule Updated - Allow ICMP Input"
}
:if ([:len [find comment="Only Allow connections to router from WAN"]] = 0) do={
  add action=accept chain=input comment="Only Allow connections to router from WAN" in-interface-list=WAN src-address-list=management_hosts dst-port=8728,21,22,8291,443 protocol=tcp
  :log info "Firewall Rule Added - Only Allow connections to router from WAN"
} else={
  set [find comment="Only Allow connections to router from WAN"] action=accept chain=input in-interface-list=WAN src-address-list=management_hosts dst-port=8728,21,22,8291,443 protocol=tcp
  :log info "Firewall Rule Updated - Only Allow connections to router from WAN"
}
:if ([:len [find comment="Allow BFD"]] = 0) do={
  add action=accept chain=input comment="Allow BFD" in-interface-list=WAN dst-port=3784,3785 protocol=udp
  :log info "Firewall Rule Added - Allow BFD"
} else={
  set [find comment="Allow BFD"] action=accept chain=input in-interface-list=WAN dst-port=3785,3785 protocol=udp
  :log info "Firewall Rule Updated - Allow BFD"
}
:if ([:len [find comment="Allow BGP"]] = 0) do={
  add action=accept chain=input comment="Allow BGP" in-interface-list=WAN dst-port=179 protocol=tcp
  :log info "Firewall Rule Added - Allow BGP"
} else={
  set [find comment="Allow BGP"] action=accept chain=input in-interface-list=WAN dst-port=179 protocol=tcp
  :log info "Firewall Rule Updated - Allow BGP"
}
:if ([:len [find comment="Allow SNMP from NMS"]] = 0) do={
  add action=accept chain=input comment="Allow SNMP from NMS" in-interface-list=WAN src-address=172.27.251.0/25 dst-port=161 protocol=udp
  :log info "Firewall Rule Added - Allow SNMP from NMS"
} else={
  set [find comment="Allow SNMP from NMS"] action=accept chain=input in-interface-list=WAN src-address=172.27.251.0/25 dst-port=161 protocol=udp
  :log info "Allow SNMP from NMS"
}
:if ([:len [find comment="Drop all other connections to router"]] = 0) do={
  add action=drop chain=input comment="Drop all other connections to router"
  :log info "Firewall Rule Added - Drop all other connections to router"
} else={
  set [find comment="Drop all other connections to router"] action=drop chain=input
  :log info "Firewall Rule Updated - Drop all other connections to router"
}
:if ([:len [find comment="Fast Track Established Forward Connections"]] = 0) do={
  add action=fasttrack-connection chain=forward comment="Fast Track Established Forward Connections" connection-state=established,related hw-offload=yes
  :log info "Firewall Rule Added - Fast Track Established Forward Connections"
} else={
  set [find comment="Fast Track Established Forward Connections"] action=fasttrack-connection chain=forward connection-state=established,related hw-offload=yes
  :log info "Firewall Rule Updated - Fast Track Established Forward Connections"
}
:if ([:len [find comment="Allow Established Forward Connections"]] = 0) do={
  add action=accept chain=forward comment="Allow Established Forward Connections" connection-state=established,related,untracked
  :log info "Firewall Rule Added - Allow Established Forward Connections"
} else={
  set [find comment="Allow Established Forward Connections"] action=accept chain=forward connection-state=established,related,untracked
  :log info "Firewall Rule Updated - Allow Established Forward Connections"
}
:if ([:len [find comment="Drop Invalid Forward Connections"]] = 0) do={
  add action=drop chain=forward comment="Drop Invalid Forward Connections" connection-state=invalid
  :log info "Firewall Rule Added - Drop Invalid Forward Connections"
} else={
  set [find comment="Drop Invalid Forward Connections"] action=drop chain=forward connection-state=invalid
  :log info "Firewall Rule Updated - Drop Invalid Forward Connections"
}
:if ([:len [ find comment="Allow access to Sci Games Keno" ]] = 0) do={
  add action=accept chain=forward comment="Allow access to Sci Games Keno" dst-address=10.22.64.0/24 in-interface-list=LAN out-interface-list=WAN
  :log info "Firewall Rule Added - Allow access to Sci Games Keno"
} else= {
  set [ find comment="Allow access to Sci Games Keno" ] action=accept chain=forward dst-address=10.22.64.0/24 in-interface-list=LAN out-interface-list=WAN
  :log info "Firewall Rule Updated - Allow access to Sci Games Keno"
}
:if ([:len [ find comment="Deny access to other sites" ]] = 0) do={
  add action=drop chain=forward comment="Deny access to other sites" dst-address=10.22.0.0/16 in-interface-list=LAN out-interface-list=WAN
  :log info "Firewall Rule Added - Deny access to other sites"
} else= {
  set [ find comment="Deny access to other sites" ] action=drop chain=forward dst-address=10.22.0.0/16 in-interface-list=LAN out-interface-list=WAN
  :log info "Firewall Rule Updated - Deny access to other sites"
}
:if ([:len [ find comment="Allow inbound SSH to site" ]] = 0) do={
  add action=accept chain=forward comment="Allow inbound SSH to site" dst-port=22 in-interface-list=WAN out-interface-list=LAN protocol=tcp
  :log info "Firewall Rule Added - Allow inbound SSH to site"
} else= {
  set [ find comment="Allow inbound SSH to site" ] action=accept chain=forward dst-port=22 in-interface-list=WAN out-interface-list=LAN protocol=tcp
  :log info "Firewall Rule Updated - Allow inbound SSH to site"
}
:if ([:len [ find comment="Allow inbound VNC to site" ]] = 0) do={
  add action=accept chain=forward comment="Allow inbound VNC to site" dst-port=5900 in-interface-list=WAN out-interface-list=LAN protocol=tcp
  :log info "Firewall Rule Added - Allow inbound VNC to site"
} else= {
  set [ find comment="Allow inbound VNC to site" ] action=accept chain=forward dst-port=5900 in-interface-list=WAN out-interface-list=LAN protocol=tcp
  :log info "Firewall Rule Updated - Allow inbound VNC to site"
}
:if ([:len [ find comment="Drop all other inbound" ]] = 0) do={
  add action=drop chain=forward comment="Drop all other inbound" in-interface-list=WAN out-interface-list=LAN
  :log info "Firewall Rule Added - Drop all other inbound"
} else= {
  set [ find comment="Allow all other outbound" ] action=drop chain=forward in-interface-list=WAN out-interface-list=LAN
  :log info "Firewall Rule Updated - Drop all other inbound"
}
/ip address
:if ([:len [ find interface=bridge ]] = 0) do={
  add address={{cidripplussubnet(lanSubnets[0].subnet,1)}} comment="Keno LAN" interface=bridge network={{dropsubnet(lanSubnets[0].subnet)}}
} else= {
  set [ find interface=bridge ] address={{cidripplussubnet(lanSubnets[0].subnet,1)}} comment="Keno LAN" network={{dropsubnet(lanSubnets[0].subnet)}}
}

:if ([:len [ find interface=lo ]] = 0) do={
  add address={{loopbacks[0]}}/32 comment="Management Loopback" interface=lo network={{loopbacks[0]}}
} else= {
  set [ find interface=lo ] address={{loopbacks[0]}}/32 comment="Management Loopback" network={{loopbacks[0]}}
}

/radius
:if ([:len [find address=172.27.252.10 service=login]] = 0) do={
  add address=172.27.252.10 service=login timeout=30s secret=
}

/user aaa
set use-radius=yes

/system/leds
set 0 interface=lte1

