AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws

  Sample SAM Template for aws
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Parameters:
  VpcId:
    Description: Black Salt IT NMS VPC ID
    Type: AWS::EC2::VPC::Id
    Default: vpc-021ef86252212fc01
  SubnetTasKenoAPI:
    Description: Tas Keno NMS Subnet
    Type: AWS::EC2::Subnet::Id
    Default: subnet-05b8af1c3f51c96bd
  RouteTableTasKeno:
    Description: Tas Keno Route Table
    Type: String
    Default: rtb-094154225a9592f6c
  S3ConfigBucket:
    Description: Storage for Config Templates
    Type: String
    Default: taskeno-config
  S3InvoiceBucket:
    Description: Invoice Config and Storage
    Type: String
    Default: blacksaltit-invoice
  LibreToken:
    Description: Libre API Token
    Type: String
    Default: 562cf058e30f6798aaefe4136362cefb
Resources:

  SecurityGroupLambdaVPC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all inbound and outbound traffic
      GroupName: LambdaFunctionSG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'

  VPCEndpointTasKenoDynamodb:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref RouteTableTasKeno

  VpcEndpointApiGateway:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref SubnetTasKenoAPI
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupAPIVPCEndpoint

  SecurityGroupAPIVPCEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS traffic to Private API
      GroupName: API Gateway VPC Endpoint
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.27.251.10/32
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.27.247.0/25
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  DynamoDBAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DynamoDBAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableTasKenoNMS}
#            Condition:
#              StringEquals:
#                aws:SourceVpce: !Ref VpcId

  Route53ManagePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'Route53ManagePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'route53:ListHostedZones'
              - 'route53:ListResourceRecordSets'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'route53:GetHostedZone'
              - 'route53:ChangeResourceRecordSets'
            Resource: 'arn:aws:route53:::hostedzone/*'

  RoleTasKenoAPI:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TasKenoAPIAccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref DynamoDBAccessPolicy
        - !Ref Route53ManagePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3ConfigBucket}/*
        - PolicyName: SESSend
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: '*'
        - PolicyName: LambdaSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:xero-api-tokens*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  RoleClientLambdaAuthorizer:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaAuthorizerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  FunctionClientAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 128
      CodeUri: assetmanager/
      Handler: client_authorizer.lambdaHandler
      Runtime: nodejs20.x
      FunctionName: ClientAuthorizer
      Architectures:
        - x86_64
      Environment:
        Variables:
          JWKS_URL: !Sub https://cognito-idp.ap-southeast-2.amazonaws.com/ap-southeast-2_JKchaTUnw/.well-known/jwks.json
      Role: !GetAtt RoleClientLambdaAuthorizer.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        EntryPoints:
          - client_authorizer.ts

  AuthorizerClient:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: 'ClientLambdaAuthorizer'
      RestApiId: !Ref RestAPITasKeno
      Type: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionClientAuthorizer.Arn}/invocations
      IdentitySource: method.request.header.Authorization
      AuthorizerResultTtlInSeconds: 0

  ClientLambdaAuthorizerApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FunctionClientAuthorizer
      Principal: apigateway.amazonaws.com

  FunctionTasKenoAPIProxy:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      MemorySize: 512
      CodeUri: assetmanager/
      Handler: tenant.lambdaHandler
      Runtime: nodejs20.x
      FunctionName: TasKeno_APIProxy
      Architectures:
        - x86_64
#      Layers:
#        - !Ref NBScoreLayer
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableTasKenoNMS
          CA_BASE64_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVPVENDQXlHZ0F3SUJBZ0lVSzQwazhOWGVRaFllNVRXa2tHdGdPdWxvR1ZJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dhc3hDekFKQmdOVkJBWVRBa0ZWTVJFd0R3WURWUVFJREFoVVlYTnRZVzVwWVRFVE1CRUdBMVVFQnd3SwpUR0YxYm1ObGMzUnZiakVXTUJRR0ExVUVDZ3dOUW14aFkyc2dVMkZzZENCSlZERVJNQThHQTFVRUN3d0lUbVYwCmQyOXlhM014SHpBZEJnTlZCQU1NRmtKc1lXTnJJRk5oYkhRZ1NWUWdUbVYwZDI5eWEzTXhLREFtQmdrcWhraUcKOXcwQkNRRVdHVzFoZEdobGQwQmliR0ZqYTNOaGJIUnBkQzVqYjIwdVlYVXdIaGNOTWpJeE1qSXhNak0wTURBNQpXaGNOTWpjeE1qSXdNak0wTURBNVdqQ0JxekVMTUFrR0ExVUVCaE1DUVZVeEVUQVBCZ05WQkFnTUNGUmhjMjFoCmJtbGhNUk13RVFZRFZRUUhEQXBNWVhWdVkyVnpkRzl1TVJZd0ZBWURWUVFLREExQ2JHRmpheUJUWVd4MElFbFUKTVJFd0R3WURWUVFMREFoT1pYUjNiM0pyY3pFZk1CMEdBMVVFQXd3V1FteGhZMnNnVTJGc2RDQkpWQ0JPWlhSMwpiM0pyY3pFb01DWUdDU3FHU0liM0RRRUpBUllaYldGMGFHVjNRR0pzWVdOcmMyRnNkR2wwTG1OdmJTNWhkVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmNWa2JmR3U5cDB2aXhiU0ptU3JIRGcKZUNlTzA0aFNqM29hODloWVp5SE5pVHFlSXd1MWw3QXNhV0ZySExndnlSMktZbkhjelZ2ZVgyMjNzNTlFelJQTApHUUVNMjBnTHpDZVZkV1lOZ245eURHVG1DT1lOdSswcjlBRjRIR3MyRkNpU2p2UUZhZFZzVWpRSVJ3bUN1a0ltCklrbUd4ZmY3OGpPbm9zVTJIZHdNYmRpa3RGN3JZL1hPa1JzSHZFdHRabHBOQU83emZxUUhUbEdmUUh6NXR0N2UKL2liTXQvNHUxWDNPbG9VOXNSajhSMG84SlN4WUFxdC9pUzRheTlyL3Z5cExQNEJDdWVubzRxUzJYTVB3elFZSgpIcGNuaittY1ZZUi9ZQVJORSs3NkZBUGZvM2dxMU1LSmppMEtaTk92SmlvUDltSktrZ21pNW4wVU1qSjBkbzBDCkF3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQjhHQTFVZEl3UVkKTUJhQUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUpyZ3lFMHNKNlJmUUNzZUJNazFQeUdQZi9ubyt1bDFXT1hXMUNOczJvZzBXLzJnCm1JNWZka1ZkNkFHVXBxUjhIVUNNNGhZU3RzTW5uTjc5TEpGUnVxc0c1TVg1eWtpZWtiZDZUcDZFdGFMUGFCZ0IKTDAzNEdJYzI4NHcxcEEzKzFJWXBCN2R4UnFtNXY4WkJyN0xzVWFIdElOREl0cjIyYVNRSDRTRG8zT0t4Z0U2RApUNFRWejd3YVM4ZnBSVVAyMWJCaXR3T2pBZGlyTlAvSFVrUzVGRnJqMDE4cm5GOExrU2tKWjhMWUx4RVdSUDJ6Ci9ab3lGeE5HWXpkK0FDY1E3cWNXc2thUkc4T2g3TWlzTDhnc3hFSjBOb2V0TThYaCsxVUFaV0p3U2hhSXliN2YKKzF3ZWhqZkVPenBEOGoxdUZqZUpPcUhmTVFlaGpzbDgvbXIrNmc4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==%
          S3_CONFIG_BUCKET: !Ref S3ConfigBucket
          COMMISSION_LIBRE_SQS: !Ref QueueCommissionLibre
          COMMISSION_SNMPMON_SQS: !Ref QueueCommissionSNMPMon
          COMMISSION_CRED_SQS: !Ref QueueCommissionCred
          INVOICE_SQS: !Ref QueueInvoiceProcessor
          REDIS_CLUSTER_PORT: 6379
          REDIS_CLUSTER_HOST:
            Fn::GetAtt:
              - ReplicationGroupRedisMonitor
              - ConfigurationEndPoint.Address
      Role: !GetAtt RoleTasKenoAPI.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-s3"
          - "aws-sdk"
          - "@aws-sdk/client-route-53"
          - "@aws-sdk/client-sqs"
          - "@aws-sdk/client-secrets-manager"
          - "@aws-sdk/client-ses"
        EntryPoints:
          - tenant.ts

  RestAPITasKeno:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TasKeno_API
      EndpointConfiguration:
        Types:
          - PRIVATE
      Policy:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
#            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPITasKeno}/*/*/*
            Resource: 'execute-api/*'

  APIGatewayResourceTasKeno:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPITasKeno
      ParentId: !GetAtt
        - RestAPITasKeno
        - RootResourceId
      PathPart: manager

  APIGatewayResourceTasKenoProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPITasKeno
      ParentId: !Ref APIGatewayResourceTasKeno
      PathPart: '{proxy+}'

  APIGatewayResourceRouterController:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPITasKeno
      ParentId: !GetAtt
        - RestAPITasKeno
        - RootResourceId
      PathPart: controller

  APIGatewayResourceRouterControllerProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPITasKeno
      ParentId: !Ref APIGatewayResourceRouterController
      PathPart: '{proxy+}'

  APIGatewayMethodTasKenoProxyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref APIGatewayResourceTasKenoProxy
      RestApiId: !Ref RestAPITasKeno
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
            "text/plain": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
      Integration:
        Type: MOCK
        IntegrationHttpMethod: ANY
        RequestTemplates:
          "application/json": "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,responsetype'"
            ResponseTemplates:
              "application/json": ""

  APIGatewayMethodTasKenoProxy:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGatewayResourceTasKenoProxy
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerClient
      HttpMethod: ANY
      ResourceId: !Ref APIGatewayResourceTasKenoProxy
      RestApiId: !Ref RestAPITasKeno
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionTasKenoAPIProxy.Arn}/invocations
          - LambdaArn: !GetAtt FunctionTasKenoAPIProxy.Arn
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              "application/json": ""
              "text/plain": ""
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
            'text/plain': 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true


  APIGatewayMethodRouterControllerProxyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref APIGatewayResourceRouterControllerProxy
      RestApiId: !Ref RestAPITasKeno
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            "application/json": "Empty"
            "text/plain": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
      Integration:
        Type: MOCK
        IntegrationHttpMethod: ANY
        RequestTemplates:
          "application/json": "{ \"statusCode\": 200 }"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,responsetype'"
            ResponseTemplates:
              "application/json": ""

  APIGatewayMethodRouterControllerProxy:
    Type: AWS::ApiGateway::Method
    DependsOn: APIGatewayResourceRouterControllerProxy
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerClient
      HttpMethod: ANY
      ResourceId: !Ref APIGatewayResourceRouterControllerProxy
      RestApiId: !Ref RestAPITasKeno
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionRouterControllerProxy.Arn}/invocations
          - LambdaArn: !GetAtt FunctionRouterControllerProxy.Arn
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              "application/json": ""
              "text/plain": ""
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
            'text/plain': 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  APIGatewayResponseDefault4xx:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref RestAPITasKeno
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,responsetype'"
        gatewayresponse.header.Access-Control-Methods: "'OPTIONS,POST'"

  APIGatewayResponseDefault5xx:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref RestAPITasKeno
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,responsetype'"
        gatewayresponse.header.Access-Control-Methods: "'OPTIONS,POST'"


#  NBAdminAssociationPPIdOptionsMethod:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      AuthorizationType: NONE
#      HttpMethod: OPTIONS
#      ResourceId: !Ref NBAdminAssociationPPIdResource
#      RestApiId: !Ref NBAdminApi
#      MethodResponses:
#        - StatusCode: "200"
#          ResponseModels:
#            "application/json": "Empty"
#          ResponseParameters:
#            method.response.header.Access-Control-Allow-Origin: true
#            method.response.header.Access-Control-Allow-Methods: true
#            method.response.header.Access-Control-Allow-Headers: true
#      Integration:
#        Type: MOCK
#        IntegrationHttpMethod: ANY
#        RequestTemplates:
#          "application/json": "{ \"statusCode\": 200 }"
#        IntegrationResponses:
#          - StatusCode: "200"
#            ResponseParameters:
#              method.response.header.Access-Control-Allow-Origin: "'*'"
#              method.response.header.Access-Control-Allow-Methods: "'POST,PUT,GET,DELETE,OPTIONS'"
#              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#            ResponseTemplates:
#              "application/json": ""

  APIGatewayDeploymentProd:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: APIGatewayMethodTasKenoProxy  # Ensure the method is created before deploying
    Properties:
      RestApiId: !Ref RestAPITasKeno
      Description: 'Deploying my API'

  ApiGatewayStageProd:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: 'prod'
      Description: 'Production stage'
      RestApiId: !Ref RestAPITasKeno
      DeploymentId: !Ref APIGatewayDeploymentProd

#  NBAdminCustomDomainMapping:
#    DependsOn: NBAdminApiProdStage
#    Type: 'AWS::ApiGateway::BasePathMapping'
#    Properties:
#      DomainName: !Ref NBScoreCustomDomain
#      RestApiId: !Ref NBAdminApi
#      BasePath: admin
#      Stage: 'prod'
#
  LambdaPermissionTasKenoAPI:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionTasKenoAPIProxy.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [
        "", [
          "arn:aws:execute-api:",
          { "Ref": "AWS::Region" }, ":",
          { "Ref": "AWS::AccountId" }, ":",
          !Ref RestAPITasKeno, "/*/*/manager*"
        ]
      ]

  LambdaPermissionRouterControllerAPI:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FunctionRouterControllerProxy.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [
        "", [
          "arn:aws:execute-api:",
          { "Ref": "AWS::Region" }, ":",
          { "Ref": "AWS::AccountId" }, ":",
          !Ref RestAPITasKeno, "/*/*/controller*"
        ]
      ]

  DynamoDBTableTasKenoNMS:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TasKenoNMS
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: GSI
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  FunctionRouterControllerProxy:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'RouterControllerProxyHandler'
      Handler: 'proxy_handler.lambda_handler'
      Runtime: 'python3.12'
      CodeUri: ./mikrotik_api/
      Timeout: 60
      Environment:
        Variables:
          ROUTER_IP: '172.27.244.141'
          ROUTER_USER: 'api'
          ROUTER_PASSWORD: '*DSv!DgR^Q3FfB4w'
          CA_PRIVATE_KEY: '-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIkIJO8Fz4hfcCAggA\nMAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECAEpkCndHnKTBIIEyGaZFCoGSdu6\ne8RJ6hdAZRuI2dOi7+azajD0IzZs3/W317M/BiIzWglRkkv7AUI8TBiP9r95vM9J\nkgUqK+EUA6NlmolHZpvSGmiwqtTwDQ4BwUEynjwtYI7caWpDpmMJK9wnj9jHxp3I\nHclSj1qiB+gqe0B/9EVyzXPmSkAGfzEoEmrEKKZlaKKqA49vg5gYHqscdc/jKRV5\nlxxoJt0Jh8eviduouKmgJ5chwomqePE9rxdXzQewL/s1vNeoedwJzLHmG/o8uRqH\nh6HotJ12NdXfOG2hjjTMaZJvFU6WmDH+yLQLk8DSqQdX3gb2tamr6sHi+5L2zmYP\npAX6aaaCRO3IE7UQ60CVc0lnwhlL3LQBxGUwuqTR+ZSKZI/oMybhtzEOh/nTYlAF\nhJ8sMx8XEK4PILDUpDACWWqm7xsn7P5a5JnFboNUTpeyTkcmtXo9f9L08b3ZNiK7\nfPcoDN7ThUp9F/I2aTAnrzxp0tkjtQ9zkgeuxsHsukpcmoTmJMwvRAHpKIUFODMb\nxGV7I7MkzlSaJBpYUu3W9rHrBJcAjGqa77Rj6c8aRNjEnjeC5JUIlSH3cpVYTABh\n+op2cih4twDDH9tWsczqWCRW4IqgfBSugdSCurhormUQrfROsmn8hrjrczlHSUSf\n9oO0pCKHOWbc+OtB8GMETKxMPeYzJMNvJGzxIEjvy3m3d7VMUMVbR7B5LA9NyBUc\nsdIJCDGszhQflYoawrR7Dk2/G7a0o3RkRxxztUfuk4p83YNrOYd32pKGKqi2yNF8\nqqNGks9O1Y30zv8ox++H5TrYHzFEqr8/8qjlFk9oA2bYPFD7WmsxLu4UfW0TONyS\nrLQV/YVJmAujlkwO43Ck+g3OzsEtK9V/twmN4Yox/dWfuz+6g4deb/i1MWRuCyaJ\nTrnMV9iHFKQ2skX4jHNPAMhWAWXNuqjmLldhf/3s1jlLnbIB5O50Tm0XdwoKkhwH\nlRyhiRm076Q32NOA5Ty+JwT5j3h7t0x9CXZNhaMdbyYA0Lqf34tqhMvEjKbvRy+Y\njZfZtxa8/HeJMy29RjVyjgc/UBmt6haouk3bCVB8+jpkFGwKnr+eNmHNHnH3GsT5\npb3ROqFvF6TWoHPIQ5bY+5XH/w06iMyjmvZuJPvXcNP7ZQRiy36ePXG/q94yTDI8\nqHywtZPaMa/rQ1i4DxgO98G+5fAnXkro3M5EEDRFvFFL5ftabsEZj0C2gsj5nExE\n7b7HEmBuTx9Y1bV8Ub+M0XVLRKXvVgkBXmnoWQs1sL83MoyrWlynAROYToWz20v4\nSXQA9lbd0txJEO/V/4MT7dTNHoTeFRpj9EXDsWjKYvLlz5UR6EbdDqtlebEgl6Jk\n4bO39d77S+2K6SiCIpbvlE5+zK4XAFBnsi8kxSeLoR+LwCpprjXZqWcOg8fGvevB\nBrmYsTlL6Zzgc2ga4+U+rf4rDFa+4JfSAAyclgh2fArMUb5ogAJM8RHjbN5tnWst\nYldKw2Cb43ySNpjzmfGlNmW++Tb6lamsNg50MpozoBD14jUmGd23xX270nLhM7jW\nkVW48vdPRgljxVzx2GWiM7kKI8lnTFSJpSXEW8WTCllMy9uksa3nCz7p1HUaA6A4\nTy5MlcBjXqdYAssHuJKCRA==\n-----END ENCRYPTED PRIVATE KEY-----'
          CA_KEY_PASSWORD: 'veBRUn*2'
          CA_CERTIFICATE: '-----BEGIN CERTIFICATE-----\nMIIEOTCCAyGgAwIBAgIUK40k8NXeQhYe5TWkkGtgOuloGVIwDQYJKoZIhvcNAQEL\nBQAwgasxCzAJBgNVBAYTAkFVMREwDwYDVQQIDAhUYXNtYW5pYTETMBEGA1UEBwwK\nTGF1bmNlc3RvbjEWMBQGA1UECgwNQmxhY2sgU2FsdCBJVDERMA8GA1UECwwITmV0\nd29ya3MxHzAdBgNVBAMMFkJsYWNrIFNhbHQgSVQgTmV0d29ya3MxKDAmBgkqhkiG\n9w0BCQEWGW1hdGhld0BibGFja3NhbHRpdC5jb20uYXUwHhcNMjIxMjIxMjM0MDA5\nWhcNMjcxMjIwMjM0MDA5WjCBqzELMAkGA1UEBhMCQVUxETAPBgNVBAgMCFRhc21h\nbmlhMRMwEQYDVQQHDApMYXVuY2VzdG9uMRYwFAYDVQQKDA1CbGFjayBTYWx0IElU\nMREwDwYDVQQLDAhOZXR3b3JrczEfMB0GA1UEAwwWQmxhY2sgU2FsdCBJVCBOZXR3\nb3JrczEoMCYGCSqGSIb3DQEJARYZbWF0aGV3QGJsYWNrc2FsdGl0LmNvbS5hdTCC\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANcVkbfGu9p0vixbSJmSrHDg\neCeO04hSj3oa89hYZyHNiTqeIwu1l7AsaWFrHLgvyR2KYnHczVveX223s59EzRPL\nGQEM20gLzCeVdWYNgn9yDGTmCOYNu+0r9AF4HGs2FCiSjvQFadVsUjQIRwmCukIm\nIkmGxff78jOnosU2HdwMbdiktF7rY/XOkRsHvEttZlpNAO7zfqQHTlGfQHz5tt7e\n/ibMt/4u1X3OloU9sRj8R0o8JSxYAqt/iS4ay9r/vypLP4BCueno4qS2XMPwzQYJ\nHpcnj+mcVYR/YARNE+76FAPfo3gq1MKJji0KZNOvJioP9mJKkgmi5n0UMjJ0do0C\nAwEAAaNTMFEwHQYDVR0OBBYEFBudNJkVDRWJIiHgnZqZ66l/R1j5MB8GA1UdIwQY\nMBaAFBudNJkVDRWJIiHgnZqZ66l/R1j5MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZI\nhvcNAQELBQADggEBAJrgyE0sJ6RfQCseBMk1PyGPf/no+ul1WOXW1CNs2og0W/2g\nmI5fdkVd6AGUpqR8HUCM4hYStsMnnN79LJFRuqsG5MX5ykiekbd6Tp6EtaLPaBgB\nL034GIc284w1pA3+1IYpB7dxRqm5v8ZBr7LsUaHtINDItr22aSQH4SDo3OKxgE6D\nT4TVz7waS8fpRUP21bBitwOjAdirNP/HUkS5FFrj018rnF8LkSkJZ8LYLxEWRP2z\n/ZoyFxNGYzd+ACcQ7qcWskaRG8Oh7MisL8gsxEJ0NoetM8Xh+1UAZWJwShaIyb7f\n+1wehjfEOzpD8j1uFjeJOqHfMQehjsl8/mr+6g8=\n-----END CERTIFICATE-----'
#          OXIDIZED_RSA_KEY: STORED IN FUNCTION AS 4K Env Var limit hit
          DYNAMODB_TABLE: !Ref DynamoDBTableTasKenoNMS
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref DynamoDBAccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                Resource: '*'

  QueueCommissionLibreDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-libre-dlq.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  QueueCommissionLibre:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-libre-queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      VisibilityTimeout: 90
      DelaySeconds: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueCommissionLibreDLQ.Arn
        maxReceiveCount: 5
  RoleSQSCommissionLibreExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSCommissionLibreLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt QueueCommissionLibre.Arn
                  - !GetAtt QueueCommissionLibreDLQ.Arn
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableTasKenoNMS}

  FunctionSQSCommissionLibre:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQSCommissionLibre
      Handler: commission-libre.handler
      Role: !GetAtt RoleSQSCommissionLibreExecution.Arn
      Runtime: nodejs20.x
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueCommissionLibre
          LIBRE_API_TOKEN: !Ref LibreToken
          CA_BASE64_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVPVENDQXlHZ0F3SUJBZ0lVSzQwazhOWGVRaFllNVRXa2tHdGdPdWxvR1ZJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dhc3hDekFKQmdOVkJBWVRBa0ZWTVJFd0R3WURWUVFJREFoVVlYTnRZVzVwWVRFVE1CRUdBMVVFQnd3SwpUR0YxYm1ObGMzUnZiakVXTUJRR0ExVUVDZ3dOUW14aFkyc2dVMkZzZENCSlZERVJNQThHQTFVRUN3d0lUbVYwCmQyOXlhM014SHpBZEJnTlZCQU1NRmtKc1lXTnJJRk5oYkhRZ1NWUWdUbVYwZDI5eWEzTXhLREFtQmdrcWhraUcKOXcwQkNRRVdHVzFoZEdobGQwQmliR0ZqYTNOaGJIUnBkQzVqYjIwdVlYVXdIaGNOTWpJeE1qSXhNak0wTURBNQpXaGNOTWpjeE1qSXdNak0wTURBNVdqQ0JxekVMTUFrR0ExVUVCaE1DUVZVeEVUQVBCZ05WQkFnTUNGUmhjMjFoCmJtbGhNUk13RVFZRFZRUUhEQXBNWVhWdVkyVnpkRzl1TVJZd0ZBWURWUVFLREExQ2JHRmpheUJUWVd4MElFbFUKTVJFd0R3WURWUVFMREFoT1pYUjNiM0pyY3pFZk1CMEdBMVVFQXd3V1FteGhZMnNnVTJGc2RDQkpWQ0JPWlhSMwpiM0pyY3pFb01DWUdDU3FHU0liM0RRRUpBUllaYldGMGFHVjNRR0pzWVdOcmMyRnNkR2wwTG1OdmJTNWhkVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmNWa2JmR3U5cDB2aXhiU0ptU3JIRGcKZUNlTzA0aFNqM29hODloWVp5SE5pVHFlSXd1MWw3QXNhV0ZySExndnlSMktZbkhjelZ2ZVgyMjNzNTlFelJQTApHUUVNMjBnTHpDZVZkV1lOZ245eURHVG1DT1lOdSswcjlBRjRIR3MyRkNpU2p2UUZhZFZzVWpRSVJ3bUN1a0ltCklrbUd4ZmY3OGpPbm9zVTJIZHdNYmRpa3RGN3JZL1hPa1JzSHZFdHRabHBOQU83emZxUUhUbEdmUUh6NXR0N2UKL2liTXQvNHUxWDNPbG9VOXNSajhSMG84SlN4WUFxdC9pUzRheTlyL3Z5cExQNEJDdWVubzRxUzJYTVB3elFZSgpIcGNuaittY1ZZUi9ZQVJORSs3NkZBUGZvM2dxMU1LSmppMEtaTk92SmlvUDltSktrZ21pNW4wVU1qSjBkbzBDCkF3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQjhHQTFVZEl3UVkKTUJhQUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUpyZ3lFMHNKNlJmUUNzZUJNazFQeUdQZi9ubyt1bDFXT1hXMUNOczJvZzBXLzJnCm1JNWZka1ZkNkFHVXBxUjhIVUNNNGhZU3RzTW5uTjc5TEpGUnVxc0c1TVg1eWtpZWtiZDZUcDZFdGFMUGFCZ0IKTDAzNEdJYzI4NHcxcEEzKzFJWXBCN2R4UnFtNXY4WkJyN0xzVWFIdElOREl0cjIyYVNRSDRTRG8zT0t4Z0U2RApUNFRWejd3YVM4ZnBSVVAyMWJCaXR3T2pBZGlyTlAvSFVrUzVGRnJqMDE4cm5GOExrU2tKWjhMWUx4RVdSUDJ6Ci9ab3lGeE5HWXpkK0FDY1E3cWNXc2thUkc4T2g3TWlzTDhnc3hFSjBOb2V0TThYaCsxVUFaV0p3U2hhSXliN2YKKzF3ZWhqZkVPenBEOGoxdUZqZUpPcUhmTVFlaGpzbDgvbXIrNmc4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==%
          DYNAMODB_TABLE: !Ref DynamoDBTableTasKenoNMS
      Timeout: 90
      MemorySize: 256
      CodeUri: commission-sqs/
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-s3"
          - "aws-sdk"
          - "@aws-sdk/client-route-53"
          - "@aws-sdk/client-sqs"
        EntryPoints:
          - commission-libre.ts
  LambdaSQSTriggerCommissionLibre:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt QueueCommissionLibre.Arn
      FunctionName: !GetAtt FunctionSQSCommissionLibre.Arn
      Enabled: true


  QueueCommissionSNMPMonDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-snmpmon-dlq.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  QueueCommissionSNMPMon:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-snmpmon-queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      VisibilityTimeout: 90
      DelaySeconds: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueCommissionSNMPMonDLQ.Arn
        maxReceiveCount: 5
  RoleSQSCommissionSNMPMonExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSCommissionSNMPMonLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt QueueCommissionSNMPMon.Arn
                  - !GetAtt QueueCommissionSNMPMonDLQ.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3ConfigBucket}/*
  FunctionSQSCommissionSNMPMon:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQSCommissionSNMPMon
      Handler: commission-snmpmon.handler
      Role: !GetAtt RoleSQSCommissionSNMPMonExecution.Arn
      Runtime: nodejs20.x
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueCommissionSNMPMon
          S3_CONFIG_BUCKET: !Ref S3ConfigBucket
          REDIS_CLUSTER_PORT: 6379
          REDIS_CLUSTER_HOST:
            Fn::GetAtt:
              - ReplicationGroupRedisMonitor
              - ConfigurationEndPoint.Address
      Timeout: 90
      MemorySize: 256
      CodeUri: commission-sqs/
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-s3"
          - "aws-sdk"
          - "@aws-sdk/client-route-53"
          - "@aws-sdk/client-sqs"
        EntryPoints:
          - commission-snmpmon.ts
  LambdaSQSTriggerCommissionSNMPMon:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt QueueCommissionSNMPMon.Arn
      FunctionName: !GetAtt FunctionSQSCommissionSNMPMon.Arn
      Enabled: true


  QueueCommissionCredDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-cred-dlq.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  QueueCommissionCred:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: commission-cred-queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      VisibilityTimeout: 90
      DelaySeconds: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueCommissionCredDLQ.Arn
        maxReceiveCount: 5
  RoleSQSCommissionCredExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSCommissionCredLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt QueueCommissionCred.Arn
                  - !GetAtt QueueCommissionCredDLQ.Arn
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableTasKenoNMS}

  FunctionSQSCommissionCred:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQSCommissionCred
      Handler: commission-cred.handler
      Role: !GetAtt RoleSQSCommissionCredExecution.Arn
      Runtime: nodejs20.x
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueCommissionCred
          CA_BASE64_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVPVENDQXlHZ0F3SUJBZ0lVSzQwazhOWGVRaFllNVRXa2tHdGdPdWxvR1ZJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dhc3hDekFKQmdOVkJBWVRBa0ZWTVJFd0R3WURWUVFJREFoVVlYTnRZVzVwWVRFVE1CRUdBMVVFQnd3SwpUR0YxYm1ObGMzUnZiakVXTUJRR0ExVUVDZ3dOUW14aFkyc2dVMkZzZENCSlZERVJNQThHQTFVRUN3d0lUbVYwCmQyOXlhM014SHpBZEJnTlZCQU1NRmtKc1lXTnJJRk5oYkhRZ1NWUWdUbVYwZDI5eWEzTXhLREFtQmdrcWhraUcKOXcwQkNRRVdHVzFoZEdobGQwQmliR0ZqYTNOaGJIUnBkQzVqYjIwdVlYVXdIaGNOTWpJeE1qSXhNak0wTURBNQpXaGNOTWpjeE1qSXdNak0wTURBNVdqQ0JxekVMTUFrR0ExVUVCaE1DUVZVeEVUQVBCZ05WQkFnTUNGUmhjMjFoCmJtbGhNUk13RVFZRFZRUUhEQXBNWVhWdVkyVnpkRzl1TVJZd0ZBWURWUVFLREExQ2JHRmpheUJUWVd4MElFbFUKTVJFd0R3WURWUVFMREFoT1pYUjNiM0pyY3pFZk1CMEdBMVVFQXd3V1FteGhZMnNnVTJGc2RDQkpWQ0JPWlhSMwpiM0pyY3pFb01DWUdDU3FHU0liM0RRRUpBUllaYldGMGFHVjNRR0pzWVdOcmMyRnNkR2wwTG1OdmJTNWhkVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmNWa2JmR3U5cDB2aXhiU0ptU3JIRGcKZUNlTzA0aFNqM29hODloWVp5SE5pVHFlSXd1MWw3QXNhV0ZySExndnlSMktZbkhjelZ2ZVgyMjNzNTlFelJQTApHUUVNMjBnTHpDZVZkV1lOZ245eURHVG1DT1lOdSswcjlBRjRIR3MyRkNpU2p2UUZhZFZzVWpRSVJ3bUN1a0ltCklrbUd4ZmY3OGpPbm9zVTJIZHdNYmRpa3RGN3JZL1hPa1JzSHZFdHRabHBOQU83emZxUUhUbEdmUUh6NXR0N2UKL2liTXQvNHUxWDNPbG9VOXNSajhSMG84SlN4WUFxdC9pUzRheTlyL3Z5cExQNEJDdWVubzRxUzJYTVB3elFZSgpIcGNuaittY1ZZUi9ZQVJORSs3NkZBUGZvM2dxMU1LSmppMEtaTk92SmlvUDltSktrZ21pNW4wVU1qSjBkbzBDCkF3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQjhHQTFVZEl3UVkKTUJhQUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUpyZ3lFMHNKNlJmUUNzZUJNazFQeUdQZi9ubyt1bDFXT1hXMUNOczJvZzBXLzJnCm1JNWZka1ZkNkFHVXBxUjhIVUNNNGhZU3RzTW5uTjc5TEpGUnVxc0c1TVg1eWtpZWtiZDZUcDZFdGFMUGFCZ0IKTDAzNEdJYzI4NHcxcEEzKzFJWXBCN2R4UnFtNXY4WkJyN0xzVWFIdElOREl0cjIyYVNRSDRTRG8zT0t4Z0U2RApUNFRWejd3YVM4ZnBSVVAyMWJCaXR3T2pBZGlyTlAvSFVrUzVGRnJqMDE4cm5GOExrU2tKWjhMWUx4RVdSUDJ6Ci9ab3lGeE5HWXpkK0FDY1E3cWNXc2thUkc4T2g3TWlzTDhnc3hFSjBOb2V0TThYaCsxVUFaV0p3U2hhSXliN2YKKzF3ZWhqZkVPenBEOGoxdUZqZUpPcUhmTVFlaGpzbDgvbXIrNmc4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==%
          DYNAMODB_TABLE: !Ref DynamoDBTableTasKenoNMS
          DEFAULT_API_PASSWORD: "*DSv!DgR^Q3FfB4w"
          RADIUS_SECRET: 6tAiCJ8P$N^P^A3ZOEiK3LtqZLfKd^
          RADIUS_SERVER: 172.27.252.10
      Timeout: 90
      MemorySize: 256
      CodeUri: commission-sqs/
      Architectures:
        - x86_64
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-s3"
          - "aws-sdk"
          - "@aws-sdk/client-route-53"
          - "@aws-sdk/client-sqs"
        EntryPoints:
          - commission-cred.ts
  LambdaSQSTriggerCommissionCred:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt QueueCommissionCred.Arn
      FunctionName: !GetAtt FunctionSQSCommissionCred.Arn
      Enabled: true



  QueueInvoiceProcessorDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: invoice-processor-dlq.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  QueueInvoiceProcessor:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: invoice-processor.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueInvoiceProcessorDLQ.Arn
        maxReceiveCount: 5

  FunctionInvoiceProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: InvoiceSQSProcessor
      CodeUri: ../invoice-pdf
      Handler: au.com.blacksaltit.invoice.pdf.InvoiceGenerator::handleRequest
      Runtime: java21
      Architectures:
        - x86_64
      MemorySize: 1024
      Timeout: 30
      Description: Create a PDF Invoice
      Environment:
        Variables:
          INVOICE_BUCKET: !Ref S3InvoiceBucket
      Role: !GetAtt RoleSQSInvoiceProcessorRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC

  #    Events:
  #      SQSEvent:
  #        Type: SQS
  #        Properties:
  #          Queue: !GetAtt NBScoreGameProcessorFIFOQueue.Arn
  #          BatchSize: 10
  RoleSQSInvoiceProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttribute
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !GetAtt QueueInvoiceProcessor.Arn
        - PolicyName: S3DocumentAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${S3InvoiceBucket}/*
        - PolicyName: LambdaSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:xero-api-tokens*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      RoleName: SQSInvoiceProcessorRole

  SQSTriggerInvoiceProcessor:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt QueueInvoiceProcessor.Arn
      FunctionName: !GetAtt FunctionInvoiceProcessor.Arn


  ReplicationGroupRedisMonitor:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      ReplicationGroupId: device-monitor-cluster
      ReplicationGroupDescription: Redis Cluster for Router Status
      Engine: redis
      EngineVersion: '7.1'
      CacheNodeType: cache.t4g.micro
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 0
      ClusterMode: enabled
      CacheSubnetGroupName: !Ref SubnetGroupRedisMonitor
      CacheParameterGroupName: default.redis7.cluster.on
      SecurityGroupIds:
        - !Ref SecurityGroupRedisMonitor
  SubnetGroupRedisMonitor:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis Cache
      SubnetIds:
        - !Ref SubnetTasKenoAPI
  SecurityGroupRedisMonitor:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ElastiCache Redis Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 172.27.251.0/24

  DynamoDBAccessPolicyRO:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DynamoDBAccessPolicyRO
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableTasKenoNMS}


  RoleDeviceMonitor:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref DynamoDBAccessPolicyRO
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: WSDynamoDBConnections
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MonitorWSConnections
        - PolicyName: ExecuteAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource:
                  - arn:aws:execute-api:*:*:*
        - PolicyName: SQSWSSendLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt MonitorStack.Outputs.WSSendSQSArn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${S3ConfigBucket}/*


    # Lambda Function
  FunctionDeviceMonitor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeviceMonitor
      Handler: monitor.handler
      Runtime: nodejs20.x
      CodeUri: devicemonitor/
      MemorySize: 1024  # Adjust as necessary
      Timeout: 30
      Role: !GetAtt RoleDeviceMonitor.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetTasKenoAPI
        SecurityGroupIds:
          - !Ref SecurityGroupLambdaVPC
      Environment:
        Variables:
          S3_CONFIG_BUCKET: !Ref S3ConfigBucket
          CA_BASE64_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVPVENDQXlHZ0F3SUJBZ0lVSzQwazhOWGVRaFllNVRXa2tHdGdPdWxvR1ZJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dhc3hDekFKQmdOVkJBWVRBa0ZWTVJFd0R3WURWUVFJREFoVVlYTnRZVzVwWVRFVE1CRUdBMVVFQnd3SwpUR0YxYm1ObGMzUnZiakVXTUJRR0ExVUVDZ3dOUW14aFkyc2dVMkZzZENCSlZERVJNQThHQTFVRUN3d0lUbVYwCmQyOXlhM014SHpBZEJnTlZCQU1NRmtKc1lXTnJJRk5oYkhRZ1NWUWdUbVYwZDI5eWEzTXhLREFtQmdrcWhraUcKOXcwQkNRRVdHVzFoZEdobGQwQmliR0ZqYTNOaGJIUnBkQzVqYjIwdVlYVXdIaGNOTWpJeE1qSXhNak0wTURBNQpXaGNOTWpjeE1qSXdNak0wTURBNVdqQ0JxekVMTUFrR0ExVUVCaE1DUVZVeEVUQVBCZ05WQkFnTUNGUmhjMjFoCmJtbGhNUk13RVFZRFZRUUhEQXBNWVhWdVkyVnpkRzl1TVJZd0ZBWURWUVFLREExQ2JHRmpheUJUWVd4MElFbFUKTVJFd0R3WURWUVFMREFoT1pYUjNiM0pyY3pFZk1CMEdBMVVFQXd3V1FteGhZMnNnVTJGc2RDQkpWQ0JPWlhSMwpiM0pyY3pFb01DWUdDU3FHU0liM0RRRUpBUllaYldGMGFHVjNRR0pzWVdOcmMyRnNkR2wwTG1OdmJTNWhkVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmNWa2JmR3U5cDB2aXhiU0ptU3JIRGcKZUNlTzA0aFNqM29hODloWVp5SE5pVHFlSXd1MWw3QXNhV0ZySExndnlSMktZbkhjelZ2ZVgyMjNzNTlFelJQTApHUUVNMjBnTHpDZVZkV1lOZ245eURHVG1DT1lOdSswcjlBRjRIR3MyRkNpU2p2UUZhZFZzVWpRSVJ3bUN1a0ltCklrbUd4ZmY3OGpPbm9zVTJIZHdNYmRpa3RGN3JZL1hPa1JzSHZFdHRabHBOQU83emZxUUhUbEdmUUh6NXR0N2UKL2liTXQvNHUxWDNPbG9VOXNSajhSMG84SlN4WUFxdC9pUzRheTlyL3Z5cExQNEJDdWVubzRxUzJYTVB3elFZSgpIcGNuaittY1ZZUi9ZQVJORSs3NkZBUGZvM2dxMU1LSmppMEtaTk92SmlvUDltSktrZ21pNW4wVU1qSjBkbzBDCkF3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQjhHQTFVZEl3UVkKTUJhQUZCdWROSmtWRFJXSklpSGduWnFaNjZsL1IxajVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUpyZ3lFMHNKNlJmUUNzZUJNazFQeUdQZi9ubyt1bDFXT1hXMUNOczJvZzBXLzJnCm1JNWZka1ZkNkFHVXBxUjhIVUNNNGhZU3RzTW5uTjc5TEpGUnVxc0c1TVg1eWtpZWtiZDZUcDZFdGFMUGFCZ0IKTDAzNEdJYzI4NHcxcEEzKzFJWXBCN2R4UnFtNXY4WkJyN0xzVWFIdElOREl0cjIyYVNRSDRTRG8zT0t4Z0U2RApUNFRWejd3YVM4ZnBSVVAyMWJCaXR3T2pBZGlyTlAvSFVrUzVGRnJqMDE4cm5GOExrU2tKWjhMWUx4RVdSUDJ6Ci9ab3lGeE5HWXpkK0FDY1E3cWNXc2thUkc4T2g3TWlzTDhnc3hFSjBOb2V0TThYaCsxVUFaV0p3U2hhSXliN2YKKzF3ZWhqZkVPenBEOGoxdUZqZUpPcUhmTVFlaGpzbDgvbXIrNmc4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==%
          DYNAMODB_TABLE: !Ref DynamoDBTableTasKenoNMS
          REDIS_CLUSTER_PORT: 6379
          REDIS_CLUSTER_HOST:
            Fn::GetAtt:
              - ReplicationGroupRedisMonitor
              - ConfigurationEndPoint.Address
          WS_SEND_QUEUE: !GetAtt MonitorStack.Outputs.WSSendSQS
#          CONNECTION_TABLE: MonitorWSConnections
#          WEBSOCKET_API_ENDPOINT: !GetAtt MonitorStack.Outputs.MonitorAPIEndpoint

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-s3"
          - "@aws-sdk/util-dynamodb"
          - "aws-sdk"
          - "@aws-sdk/client-route-53"
          - "@aws-sdk/client-sqs"
          - "@aws-sdk/client-apigatewaymanagementapi"
        EntryPoints:
          - monitor.ts

  # CloudWatch Events Rule (EventBridge Rule)
  EventRuleDeviceMonitor:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/1 * * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt FunctionDeviceMonitor.Arn
          Id: DeviceMonitorFunctionTarget

  # Lambda Permission to Allow EventBridge to Invoke the Lambda
  PermissionDeviceMonitorLambdaInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FunctionDeviceMonitor
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleDeviceMonitor.Arn


  MonitorStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./stacks/monitor-stack.yml




#Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
